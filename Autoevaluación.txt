
PUNTAJE: 

0: No realizado.
0.25: Implementación con problemas mayores (funciona 25% de las veces o no funciona)
0.5: Implementación con funcionamiento irregular (funciona 50% de las veces)
0.75: Implementación con problemas menores (funciona 75% de las veces)
1: Implementación completa sin problemas (funciona 100% de las veces)


Requerimientos Funcionales Obligatorios.

1. Clases y estructuras que forman el programa (1 pto) 1

Implementar modelo orientado a objetos de la simulación de git. Esto debe incluir al
menos las siguientes entidades: Archivo de texto plano, Commit, Zonas de trabajo y
repositorio. Puede tomar como referencia las entidades creadas en el Laboratorio 3, o
bien implementar alguna integración con los Laboratorios 1 o 2 (ver Requisitos
Funcionales Extra). (1 pto)2. Su programa debe contar con las siguientes funcionalidades mínimas (basadas en el
sistema de control de versiones git): Crear un nuevo archivo en el workspace, git init, git
add, git commit, git pull, git push. (1,5 pts)
3. Implementar una funcionalidad que permita obtener el estado de cada Zona de trabajo,
mostrando una lista con los archivos incluidos (en el caso de Workspace e Index) o los
últimos 3 commits (en el caso de Local Repository y Remote Repository). (0,5 pts)
4. Implementar las funcionalidades indicadas en los Requisitos Funcionales mencionados
anteriormente en una aplicación con entorno gráfico, utilizando elementos propios de la
biblioteca de entorno gráfico seleccionada y separando las clases de modelo respecto
de las de la vista. Puede utilizar el siguiente esquema como referencia para construir su
interfaz gráfica de usuario: (1 pts)

Requerimientos extra 

1. Implementar cualquiera de los Requerimientos Extra indicados en el Laboratorio 3,

a. git log                                      1 
b. git branch                                   1
c. git checkout                                 1
d. git merge                                    1


2. Implementar un sistema de persistencia de las Zonas de trabajo mediante lectura y
escritura de archivos 

PUNTAJE  :  0


3. Integrar la solución orientada a objetos con la solución bajo paradigma lógico a través de
la integración con P# 

PUNTAJE  :  0


4. Integrar la solución orientada a objetos con la solución bajo paradigma funcional a través
de la integración con Iron Scheme

PUNTAJE  :  0

5. De forma alternativa a la integración directa entre C# y Scheme usando IronScheme, se
puede reemplazar por integración a través de Web Services + REST directamente
implementado en Dr. Racket ( http://docs.racket-lang.org/more/index.html ).

PUNTAJE  :  0


6. De forma alternativa a la integración directa entre C# y SWI Prolog usando P#, se puede
reemplazar por integración a través de Web Services directamente implementado en
Swi-Prolog ( http://www.swi-prolog.org/howto/http/ ) (1,5 pts) .

PUNTAJE  :  0

7. También se consideran funcionalidades/características extras planteadas por el
estudiante, sin embargo estas deben ser consultadas y aprobadas de manera formal por
el profesor. Todo requerimiento extra no descrito en este documento puede ser
considerado como bonificación a la nota, esto dependerá de la dificultad y atractivo de la
funcionalidad. Los puntos alcanzados mediante funcionalidades extra solo se consideran
solamente si los requisitos mínimos para obtener un 4.0 son completados
satisfactoriamente.



Requerimientos No Funcionales obligatorios. 


1. La implementación debe ser en el lenguaje de programación Java

PUNTAJE : 1


2. Todas las interacciones con el programa deben ser mediante consola/terminal. Puede recurrir al uso de System.in y 
System.out (en Java). Para sus funcionalidades, solo se permite el uso de la biblioteca estándar de Java (sin importar bibliotecas
externas).

PUNTAJE : 1

3. (obligatorio) Su solución debe demostrar la aplicación del paradigma orientado a objetos. No basta con que su solución esté 
implementada en Java. Su diseño y correspondiente implementación debe seguir los lineamientos del paradigma Orientado a Objetos.

PUNTAJE : 1

4. (1 pto) Se debe documentar el código indicando una breve descripción de las clases creadas, sus atributos, métodos y relaciones. 
Procure utilizar comentarios tipo Javadoc para esto.

PUNTAJE : 1

5. (1 pto) Se debe cuidar la organización del código (orden y claridad). Procure que su diseño de clases no viole los principios de 
acoplamiento y cohesión.

PUNTAJE 1

6. (1.5 pto) Como parte de su Informe de Laboratorio, debe incluir un diagrama de clases UML a nivel de análisis que describa las 
entidades y relaciones del problema abordado.

PUNTAJE 1

7. (1.5 pto) Como parte de su Informe de Laboratorio, debe incluir un diagrama de clases UML tras la implementación de la solución

PUNTAJE : 1

8. (1 pto) Historial de trabajo en GitHub 

PUNTAJE : 1
t
